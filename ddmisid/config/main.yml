# -------------------------------
# user-defined configuration file
# -------------------------------
user_id: "hmhanna" # CERN user ID for kinit @CERN.CH

# =============
# test-run flag
# =============
# if true, run pidcalib in `--test` mode
max_calib_files: 25 # how many calibration samples to run over in pidcalib [applies only if test is True]
# if true, produce all run info, including the path to calibration samples, TDirectiory and TTree
verbose: True 

# =======================
# pidcalib2 configuration - if in doubt: https://twiki.cern.ch/twiki/bin/view/LHCb/PIDCalibPackage#Which_variables_are_available_wi
# =======================
pid:
  # common to all particle species and years of data taking
  # NOTE: take care to specify ranges compatible with the data surviving the nominal event selection
  
  # alias : list[float, ...]
  sweight_binning:
    "Brunel_P"       : [10_000,12_500, 15_000, 17_500, 20_000, 25_000, 50_000, 100_000]
    "Brunel_ETA"     : [1.5, 2.5, 5.5]  
    "nTracks_Brunel" : [0, 250, 1000] 
  
  pid_extrap_binning:
    "Brunel_P"       : [10_000, 12_500, 15_000, 17_500, 20_000, 22_500, 25_000, 50_000, 100_000]
    "Brunel_ETA"     : [1.5, 2.5, 3.5, 5.5]  
    "nTracks_Brunel" : [0, 250, 1000] 
    
  # what species are considered in the makeup of the misID?
  # NOTE: take care to specify the species alias employed in pidcalib2
  species: 
    kaon    : "K"
    pion    : "Pi"
    proton  : "P"
    electron: "e_B_Jpsi"
  
  # year-specific configuration
  year: "2018" 
  magpol: "up" # follow pidcalib2 syntax
  
  # =====================================================================================
  # PIDCALIB section: adopt pidcalib syntax to extract efficiencies from calibration data
  # =====================================================================================
  
  # SELECTIONS [use pidcalib2 syntax]
  # ---------------------------------
  control: "ProbNNghost<0.1 & DLLmu<-3.0 & IsMuon==0.0 & probe_hasMuon==1.0 & InMuonAcc==1.0" # arg to `--pid_cut` option in pidcalib2
  target: "ProbNNghost<0.1 & DLLmu>-2.0 & DLLmu<0.0 & IsMuon==0.0 & probe_hasMuon==1.0 & InMuonAcc==1.0" # arg to `--pid_cut` option in pidcalib2 


  # selection shared between the hadron-enriched and signal samples. 
  # usually involving acceptance cuts, and the extrema of the mommentum range established in nominal events selection
  # for run 2 stripping vs turbo analyses, the `Brunel_` prefix might be required - see: https://twiki.cern.ch/twiki/bin/view/LHCb/PIDCalibPackage
  common_selection: "probe_Brunel_NShared==0 & Brunel_P>10000 & Brunel_P<100000 & Brunel_PT>1500" # NOTE: ensure the extrema are compatible with the binning json files

  # pidcalib cuts of HE sample to define the reco partitions
  reco_partitions:
    kaon_like      : "DLLK>0.0 & (DLLK-DLLp)>0.0 & (DLLK-DLLe)>0.0"
    pion_like      : "DLLK<0.0 & DLLp<0.0 & DLLe<0.0"
    proton_like    : "DLLp>0.0 & (DLLp-DLLK)>0.0 & (DLLp-DLLe)>0.0"
    electron_like  : "DLLe>0.0 & (DLLe-DLLK)>0.0 & (DLLe-DLLp)>0.0"
    # # define `ghost-like` the partition evading all the above, in a slight abuse of notation
    #ghost_like: "((DLLK < 0) | (DLLK == 0) | (DLLK - DLLp < 0) | (DLLK - DLLp == 0) | (DLLK - DLLe < 0) | (DLLK - DLLe == 0)) & ((DLLK > 0) | (DLLK == 0) | (DLLp > 0) | (DLLp == 0) | (DLLe > 0) | (DLLe == 0)) & ((DLLp < 0) | (DLLp == 0) | (DLLp - DLLK < 0) | (DLLp - DLLK == 0) | (DLLp - DLLe < 0) | (DLLp - DLLe == 0)) & ((DLLe < 0) | (DLLe == 0) | (DLLe - DLLK < 0) | (DLLe - DLLK == 0) | (DLLe - DLLp < 0) | (DLLe - DLLp == 0))"

  # ghosts section [optional, but nessary if `ghost-like` if not None]
  # --------------
  ghost_config: ~


# =============================================================================================================================
# DATA section: cuts applied to the hadron enriched *data*: the syntax must reflect the branch names in the user-defined ntuple
# =============================================================================================================================
data: 
  # file/directory/tree coordinates
  # ------------------------------ 
  input_path: "/afs/cern.ch/user/h/hmhanna/private/DDmisID/DDmisID/Data/inputData/Bc2D0MuNuX.root" # path to hadron-enriched data file (pid + intermediate selection applied)
  data_key: "B2DMuNuX_D02KPi_FakeMuonTuple"
  data_tree: "DecayTree"
  output_path: "/afs/cern.ch/user/h/hmhanna/private/DDmisID/DDmisID/Data/outputData/fakemuon_2018_MU.root" # path to hadron-enriched data file (pid + intermediate selection applied)

  # prefix for the bespoke single-track branches in the input ROOT file
  # -------------------------------------------------------------------
  data_prefixes: # NOTE: keys must match binning variable names
    P: "Mu_plus" # to signal that branches follow the naming convention Mu_plus_{P, PT, ETA...}
    ETA: "Mu_plus_LK"
    nTracks: ""

  # NOTE: follow awkward syntax: each selection cut enclosed by a set of brackets
  # -----------------------------------------------------------------------------
  data_reco_partitions: 
    kaon      : "(Mu_plus_InMuonAcc==1.0) & (Mu_plus_NShared==0) & (Mu_plus_P>10000) & (Mu_plus_PIDmu<-3.0) & (Mu_plus_isMuon==0) & (Mu_plus_hasMuon==1.0) & (Mu_plus_ProbNNghost<0.1) & (Mu_plus_PIDK>0.0) & ( (Mu_plus_PIDK-Mu_plus_PIDp)>0.0 ) & ( (Mu_plus_PIDK-Mu_plus_PIDe)>0.0 )"
    pion      : "(Mu_plus_InMuonAcc==1.0) & (Mu_plus_NShared==0) & (Mu_plus_P>10000) & (Mu_plus_P<100000) & (Mu_plus_PT>1500) & (Mu_plus_PIDmu<-3.0) & (Mu_plus_isMuon==0) & (Mu_plus_hasMuon==1.0) & (Mu_plus_ProbNNghost<0.1) & (Mu_plus_PIDK<0.0) & (Mu_plus_PIDp<0.0) & (Mu_plus_PIDe<0.0)"
    proton    : "(Mu_plus_InMuonAcc==1.0) & (Mu_plus_NShared==0) & (Mu_plus_P>10000) & (Mu_plus_P<100000) & (Mu_plus_PT>1500) & (Mu_plus_PIDmu<-3.0) & (Mu_plus_isMuon==0) & (Mu_plus_hasMuon==1.0) & (Mu_plus_ProbNNghost<0.1) & (Mu_plus_PIDp>0.0) & ( (Mu_plus_PIDp-Mu_plus_PIDK)>0.0 ) & ( (Mu_plus_PIDp-Mu_plus_PIDe)>0.0 )"
    electron  : "(Mu_plus_InMuonAcc==1.0) & (Mu_plus_NShared==0) & (Mu_plus_P>10000) & (Mu_plus_P<100000) & (Mu_plus_PT>1500) & (Mu_plus_PIDmu<-3.0) & (Mu_plus_isMuon==0) & (Mu_plus_hasMuon==1.0) & (Mu_plus_ProbNNghost<0.1) & (Mu_plus_PIDe>0.0) & ( (Mu_plus_PIDe-Mu_plus_PIDK)>0.0 ) & ( (Mu_plus_PIDe-Mu_plus_PIDp)>0.0 )"
    # NOTE: I decided to absorb any residual candidates in the data in a `ghost` partition defined containing candidates evading the above; below, what I would write to match the string passed to pidcalib2. Both approaches yeild the same result as verified on 2018 MU data. 
    #ghost     : "(Mu_plus_InMuonAcc==1.0) & (Mu_plus_NShared==0) & (Mu_plus_P>10000) & (Mu_plus_P<100000) & (Mu_plus_PT>1500) & (Mu_plus_PIDmu<0.0) & (Mu_plus_isMuon==0) & (Mu_plus_hasMuon==1.0) & (Mu